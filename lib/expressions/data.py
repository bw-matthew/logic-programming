import networkx as nx
from lib.family_tree import FATHER, MOTHER, MARRIAGE

PARENT = 'parent'
CHILD = 'child'
ANCESTOR = 'ancestor'
DESCENDANT = 'descendant'

FATHER_EXPRESSION = nx.MultiDiGraph()
FATHER_EXPRESSION.add_edge('a', 'b', key=FATHER)

MOTHER_EXPRESSION = nx.MultiDiGraph()
MOTHER_EXPRESSION.add_edge('a', 'b', key=MOTHER)

PARENT_EXPRESSION = nx.MultiDiGraph()
PARENT_EXPRESSION.add_edge('a', 'b', key=PARENT)

CHILD_EXPRESSION = nx.MultiDiGraph()
CHILD_EXPRESSION.add_edge('a', 'b', key=CHILD)

CHILD_SUBSTITUTION = nx.MultiDiGraph()
CHILD_SUBSTITUTION.add_edge('b', 'a', key=PARENT)

MARRIAGE_EXPRESSION = nx.MultiDiGraph()
MARRIAGE_EXPRESSION.add_edge('a', 'b', key=MARRIAGE)

ANCESTOR_EXPRESSION = nx.MultiDiGraph()
ANCESTOR_EXPRESSION.add_edge('a', 'b', key=ANCESTOR)

ANCESTOR_SUBSTITUTION = nx.MultiDiGraph()
ANCESTOR_SUBSTITUTION.add_edge('a', 'c', key=PARENT)
ANCESTOR_SUBSTITUTION.add_edge('c', 'b', key=ANCESTOR)

DESCENDANT_EXPRESSION = nx.MultiDiGraph()
DESCENDANT_EXPRESSION.add_edge('a', 'b', key=DESCENDANT)

DESCENDANT_SUBSTITUTION = nx.MultiDiGraph()
DESCENDANT_SUBSTITUTION.add_edge('b', 'a', key=ANCESTOR)

EXPRESSION_SUBSTITUTIONS = {
    PARENT_EXPRESSION: [FATHER_EXPRESSION, MOTHER_EXPRESSION],
    CHILD_EXPRESSION: [CHILD_SUBSTITUTION],
    ANCESTOR_EXPRESSION: [PARENT_EXPRESSION, ANCESTOR_SUBSTITUTION],
    DESCENDANT_EXPRESSION: [DESCENDANT_SUBSTITUTION]
}
